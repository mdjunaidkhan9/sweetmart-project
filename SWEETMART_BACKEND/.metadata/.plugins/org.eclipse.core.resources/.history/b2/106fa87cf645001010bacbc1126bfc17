//package com.project.orderbill.controller;
//
//import com.project.orderbill.dto.OrderItemDTO;
//import com.project.orderbill.dto.SweetOrderDTO;
//import com.project.orderbill.entity.BillEntity;
//import com.project.orderbill.service.BillService;
//import org.junit.jupiter.api.Test;
//import org.junit.jupiter.api.extension.ExtendWith;
//import org.mockito.InjectMocks;
//import org.mockito.Mock;
//import org.mockito.junit.jupiter.MockitoExtension;
//import org.springframework.http.ResponseEntity;
//
//import java.time.LocalDateTime;
//import java.util.List;
//
//import static org.junit.jupiter.api.Assertions.*;
//import static org.mockito.Mockito.*;
//
//@ExtendWith(MockitoExtension.class)
//class BillControllerTest {
//
//    @Mock
//    private BillService billService;
//
//    @InjectMocks
//    private BillController billController;
//
//    @Test
//    void testGenerateBill() {
//        Long orderId = 1L;
//        BillEntity bill = new BillEntity(orderId, "junaid", 100.0, LocalDateTime.now());
//
//        when(billService.generateAndSaveBill(orderId)).thenReturn(bill);
//
//        ResponseEntity<BillEntity> response = billController.generateBill(orderId);
//
//        assertEquals(200, response.getStatusCodeValue());
//        assertEquals(bill, response.getBody());
//    }
//
//    @Test
//    void testGetBillDetails() {
//        Long orderId = 1L;
//        SweetOrderDTO order = new SweetOrderDTO();
//        order.setSweetOrderId(orderId);
//        order.setUsername("junaid");
//        order.setTotalAmount(100.0);
//        order.setCreatedDate(LocalDateTime.now());
//        order.setItems(List.of(new OrderItemDTO())); // Adding dummy item list
//
//        when(billService.getOrderDetails(orderId)).thenReturn(order);
//
//        ResponseEntity<SweetOrderDTO> response = billController.getBillDetails(orderId);
//
//        assertEquals(200, response.getStatusCodeValue());
//        assertEquals(order, response.getBody());
//    }
//
//    @Test
//    void testGetAllBills() {
//        List<BillEntity> bills = List.of(new BillEntity(1L, "junaid", 100.0, LocalDateTime.now()));
//
//        when(billService.getAllBills()).thenReturn(bills);
//
//        ResponseEntity<List<BillEntity>> response = billController.getAllBills();
//
//        assertEquals(200, response.getStatusCodeValue());
//        assertEquals(bills, response.getBody());
//    }
//
//    @Test
//    void testGetBillById() {
//        Long billId = 1L;
//        BillEntity bill = new BillEntity(billId, "junaid", 100.0, LocalDateTime.now());
//
//        when(billService.getBillById(billId)).thenReturn(bill);
//
//        ResponseEntity<BillEntity> response = billController.getBillById(billId);
//
//        assertEquals(200, response.getStatusCodeValue());
//        assertEquals(bill, response.getBody());
//    }
//
//    @Test
//    void testDeleteBill() {
//        Long billId = 1L;
//        doNothing().when(billService).deleteBill(billId);
//
//        ResponseEntity<Void> response = billController.deleteBill(billId);
//
//        assertEquals(204, response.getStatusCodeValue());
//    }
//}
