package com.project.cart.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.project.cart.model.CartItem;
import com.project.cart.service.CartService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.Collections;
import java.util.List;

public class CartControllerTest {

    @Mock
    private CartService cartService;

    @InjectMocks
    private CartController controller;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void addToCart_valid_returnsCartItem() {
        CartItem item = new CartItem();
        when(cartService.addToCart("user1", "prod1", 2)).thenReturn(item);

        ResponseEntity<CartItem> response = controller.addToCart("user1", "prod1", 2);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals(item, response.getBody());
    }

    @Test
    void getCart_returnsList() {
        List<CartItem> items = List.of(new CartItem(), new CartItem());
        when(cartService.getCartByUsername("user1")).thenReturn(items);

        ResponseEntity<List<CartItem>> response = controller.getCart("user1");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals(2, response.getBody().size());
    }

    @Test
    void updateQuantity_valid_returnsCartItem() {
        CartItem item = new CartItem();
        when(cartService.updateQuantity("user1", "prod1", 3)).thenReturn(item);

        ResponseEntity<CartItem> response = controller.updateQuantity("user1", "prod1", 3);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals(item, response.getBody());
    }

    @Test
    void removeFromCart_returnsSuccessMessage() {
        doNothing().when(cartService).removeFromCart("user1", "prod1");

        ResponseEntity<String> response = controller.removeFromCart("user1", "prod1");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("Product removed from cart successfully.", response.getBody());
    }

    @Test
    void clearCart_returnsSuccessMessage() {
        doNothing().when(cartService).clearCart("user1");

        ResponseEntity<String> response = controller.clearCart("user1");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("Cart cleared successfully.", response.getBody());
    }

    // Optionally, add tests for edge cases (e.g., service throws exception)
    @Test
    void addToCart_serviceThrows_returnsException() {
        when(cartService.addToCart("user1", "prod1", 2)).thenThrow(new IllegalArgumentException("Invalid"));

        assertThrows(IllegalArgumentException.class, () -> controller.addToCart("user1", "prod1", 2));
    }
}
