package com.project.payment.service;


import com.project.payment.dto.BillDTO;
import com.project.payment.entity.Payment;
import com.project.payment.feign.OrderBillClient;
import com.project.payment.repository.PaymentRepository;
import com.stripe.Stripe;
import com.stripe.model.PaymentIntent;
import com.stripe.param.PaymentIntentCreateParams;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class PaymentService {

    @Value("${stripe.secret.key}")
    private String stripeSecretKey;

    private final OrderBillClient orderBillClient;
    private final PaymentRepository paymentRepository;

    public PaymentService(OrderBillClient orderBillClient, PaymentRepository paymentRepository) {
        this.orderBillClient = orderBillClient;
        this.paymentRepository = paymentRepository;
    }

    public Payment processPayment(String username) throws Exception {
        Stripe.apiKey = stripeSecretKey;

        BillDTO bill = orderBillClient.getBillByUsername(username);
        if (bill == null) {
            throw new RuntimeException("No bill found for username: " + username);
        }

        PaymentIntentCreateParams params = PaymentIntentCreateParams.builder()
                .setAmount((long) (bill.getTotalAmount() * 100)) // in cents
                .setCurrency("usd")
                .setDescription("Payment for SweetOrder ID: " + bill.getSweetOrderId())
                .build();

        PaymentIntent paymentIntent = PaymentIntent.create(params);

        Payment payment = new Payment(
                paymentIntent.getId(),
                username,
                bill.getBillId(),
                bill.getTotalAmount(),
                paymentIntent.getStatus()
        );

        return paymentRepository.save(payment);
    }

    public Payment getLatestPayment(String username) {
        Optional<Payment> payment = paymentRepository.findTopByUsernameOrderByPaymentIdDesc(username);
        return payment.orElse(null);
    }
}

