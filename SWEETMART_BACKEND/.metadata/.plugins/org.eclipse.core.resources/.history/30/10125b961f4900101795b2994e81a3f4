package com.project.auth.service;

import com.project.auth.model.User;
import com.project.auth.repo.UserRepository;
import com.project.auth.exception.AuthenticationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AuthService {
    private static final Logger logger = LoggerFactory.getLogger(AuthService.class);
    private final UserRepository repo;
    private final PasswordEncoder encoder;
    private final JwtUtil jwtUtil;
    private final EmailService emailService;

    public AuthService(UserRepository repo, PasswordEncoder encoder, JwtUtil jwtUtil, EmailService emailService) {
        this.repo = repo;
        this.encoder = encoder;
        this.jwtUtil = jwtUtil;
        this.emailService = emailService;
    }

    public String register(User user) {
        if (repo.findByUsername(user.getUsername()).isPresent()) {
            return "Username taken";
        }

        String otp = String.valueOf((int) (Math.random() * 900000) + 100000);
        user.setOtp(otp);
        user.setEnabled(false);
        user.setPassword(encoder.encode(user.getPassword()));
        repo.save(user);

        try {
            emailService.sendEmail(user.getUserEmail(), "OTP Verification", "Your OTP is: " + otp, user.getRole());
        } catch (Exception e) {
            logger.error("Failed to send OTP email: {}", e.getMessage());
        }

        return "OTP sent to email";
    }

    public String verifyOtp(String email, String otp) {
        User user = repo.findByUserEmail(email).orElseThrow(() -> new AuthenticationException("User not found"));

        if (user.getOtp().equals(otp)) {
            user.setEnabled(true);
            user.setOtp(null);
            repo.save(user);
            return "Account verified successfully";
        }
        return "Invalid OTP";
    }

    public String login(String username, String password) {
        User user = repo.findByUsername(username).orElseThrow(() -> new AuthenticationException("User not found"));
        if (!user.isEnabled()) throw new AuthenticationException("Account not verified");

        if (encoder.matches(password, user.getPassword())) {
            return jwtUtil.generateToken(user.getUsername(), user.getRole());
        }
        throw new AuthenticationException("Invalid credentials");
    }

    public List<User> getAllUsers() {
        return repo.findAll();
    }

    public List<User> getUsersByRole(String role) {
        return repo.findByRoleIgnoreCase(role);
    }
}
